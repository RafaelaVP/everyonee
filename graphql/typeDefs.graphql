type Query {
    # Busca os funcionários
    getEmployeeDetails: [Employee]
    getProductDetails: [Product]
    getManyMaker: [Maker]
    getOneMaker(id:ID!):Maker
    getManyCategory: [Category]
    getOneCategory(id:ID!):Category
    getcategoryProduct: [CategoryProduct]
    getCompanyDetails: [Company]  

}

type Mutation {
    createEmployee(id:ID, firstName: String, lastName: String,companyId:Int, email: String):String
    updateEmployee(id:ID, firstName: String, lastName: String, email: String):String
    deleteEmployee(id:ID):String

    createProduct(data:CreateProductInput):String
    updateProduct(id:ID, nameProduct: String, typeProduct: String, makerId:Int):String
    deleteProduct(id:ID):String

    createMaker(id: ID, nameMaker: String, employeeId:Int, companyId:Int): String

    createCategory(data:CreateCategoryInput): String

    createCompany(id:ID, nameCompany: String):String
}
input CreateProductInput {id:ID, nameProduct: String, typeProduct: String, makerId:Int,companyId:Int, categories:[CreateCategoryInput]}
input CreateCategoryInput {id: ID, nameCategory: String, products:[ID]}


type Employee {
    id: ID!
    # primeiro nome funcionário
    firstName: String
    lastName: String
    email: String
    makers: [Maker]

}

type Product {
    id: ID!
    nameProduct: String
    typeProduct: String
    makerId: Int
    categories: [Category]
    makers: [Maker]
}

type Maker {
    id: ID!
    nameMaker: String
    employeeId: Int
    products: [Product]
    employees: [Employee]
}

type Category {
    id: ID!
    nameCategory: String
    products: [Product] 
}

type CategoryProduct {
    id: ID!
   
}

type Company {
    id: ID!
    nameCompany: String
    makers: [Maker]
    products: [Product] 
    employees: [Employee]
}