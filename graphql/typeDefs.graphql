type Query {
    getEmployeeDetails: [Employee]
    getProductDetails: [Product]
    getManyMaker: [Maker]
    getOneMaker(id:ID!):Maker
    getManyCategory: [Category]
    getOneCategory(id:ID!):Category
    getcategoryProduct: [CategoryProduct]
    
    

}

type Mutation {
    createEmployee(id:ID, firstName: String, lastName: String, email: String):String
    updateEmployee(id:ID, firstName: String, lastName: String, email: String):String
    deleteEmployee(id:ID):String

    createProduct(id:ID, nameProduct: String, typeProduct: String):String
    updateProduct(id:ID, nameProduct: String, typeProduct: String):String
    deleteProduct(id:ID):String

    createMaker(id: ID, nameMaker: String): String

    createCategory(id: ID, nameCategory: String): String


}

type Employee {
    id: ID!
    firstName: String
    lastName: String
    email: String
}


type Product {
    id: ID!
    nameProduct: String
    typeProduct: String
   
}

type Maker {
    id: ID!
    nameMaker: String
   
}

type Category {
    id: ID!
    nameCategory: String
   
}

type CategoryProduct {
    id: ID!
   
}